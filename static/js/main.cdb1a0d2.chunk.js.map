{"version":3,"sources":["store/recordForm/type.ts","store/recordForm/actions.ts","store/doctorSchedule/type.ts","store/doctorSchedule/actions.ts","store/index.ts","api/request.ts","feedback/Snackbar.tsx","components/doctorSchedule/components/table.tsx","components/doctorSchedule/components/filterSchedule.tsx","components/doctorSchedule/doctorSchedule.tsx","components/recordForm/components/fullName.tsx","components/recordForm/components/recordDate.tsx","components/recordForm/components/complaints.tsx","components/recordForm/recordForm.tsx","api/getDoctors.ts","components/AppBarMenu.tsx","pages/AppStack.tsx","store/recordForm/reducer.ts","store/doctorSchedule/reducer.ts","store/root-reducer.ts","store/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["recordFormType","doctorScheduleType","changeNamePatient","name","type","CHANGE_NAME_PATIENT","changeNameDoctor","_id_doctor","CHANGE_NAME_DOCTOR","changeDate","date","CHANGE_DATE","changeTime","time","CHANGE_TIME","changeComplaints","complaint","CHANGE_COMPLAINTS","changeDoctorFullName","doctorFullName","CHANGE_DOCTOR_FULL_NAME","getPatients","patients","GET_PATIENTS","action","record","recordFormActions","doctor","doctorSchedule","request","url","a","method","body","form","FormData","Object","entries","map","key","val","append","fetch","then","res","ok","json","message","severity","Alert","props","elevation","variant","CustomizedSnackbar","open","classes","useStyles","handleClose","event","reason","className","root","Snackbar","autoHideDuration","onClose","makeStyles","theme","width","marginTop","spacing","connect","state","dispath","useState","snackbar","setSnackbar","button","setButton","TableContainer","component","Paper","Table","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","_id","scope","patient","complaints","Button","color","disabled","onClick","find","item","arr","filter","n","handleClickDelete","helperTextDoctor","setHelperTextDoctor","errorDoctor","setErrorDoctor","useEffect","handleNameDoctor","trim","handleClick","FormControl","formControl","error","InputLabel","id","Select","labelId","onChange","target","value","MenuItem","fullName","FormHelperText","margin","label","format","toISOString","split","KeyboardButtonProps","createStyles","marginRight","display","alignItems","justifyContent","paddingTop","DoctorSchedule","patientName","helperTextPatient","setHelperTextPatient","errorPatient","setErrorPatient","handleChangeName","length","TextField","helperText","minWidth","minute","hour","min","marginLeft","e","ReacordForm","autoComplete","padding","get","doctors","AppBar","position","Toolbar","toolbar","to","flexGrow","AppStack","exact","path","RecordForm","defaultState","Date","recordFormReducer","doctorScheduleReducer","rootReducer","combineReducers","store","createStore","App","utils","DateFnsUtils","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"omBAEYA,E,2KAAAA,K,0CAAAA,E,wCAAAA,E,0BAAAA,E,0BAAAA,E,sCAAAA,E,mDAAAA,M,KCCL,ICDKC,EDCCC,EAAoB,SAAEC,GACjC,MAAO,CACLC,KAAMJ,EAAeK,oBACrBF,SAISG,EAAmB,SAAEC,GAChC,MAAO,CACLH,KAAMJ,EAAeQ,mBACrBD,eAISE,EAAa,SAAEC,GAC1B,MAAO,CACLN,KAAMJ,EAAeW,YACrBD,SAISE,EAAa,SAAEC,GAC1B,MAAO,CACLT,KAAMJ,EAAec,YACrBD,SAISE,EAAmB,SAAEC,GAChC,MAAO,CACLZ,KAAMJ,EAAeiB,kBACrBD,cAISE,EAAuB,SAAEC,GACpC,MAAO,CACLf,KAAMJ,EAAeoB,wBACrBD,oB,SCvCQlB,K,wCAAAA,E,0BAAAA,E,6BAAAA,M,KCCL,IAAMK,EAAmB,SAAEC,GAChC,MAAO,CACLH,KAAMH,EAAmBO,mBACzBD,eAISE,EAAa,SAAEC,GAC1B,MAAO,CACLN,KAAMH,EAAmBU,YACzBD,SAISW,EAAc,SAAEC,GAC3B,MAAO,CACLlB,KAAMH,EAAmBsB,aACzBD,aCbSE,EAAS,CACpBC,OAAQC,EACRC,OAAQC,G,yBCRGC,EAAO,uCAAG,WAAQC,GAAR,+BAAAC,EAAA,6DAAqBC,EAArB,+BAA8B,MAAOC,EAArC,uBAErBH,EAAG,kDAA8CA,GAE3CI,EAAO,IAAIC,SAEjBC,OAAOC,QAASJ,GAAOK,KAAI,YAAwB,IAAD,mBAApBC,EAAoB,KAAfC,EAAe,KAChDN,EAAKO,OAAQF,EAAKC,MAPC,SAURE,MAAOZ,EAAK,CAAEE,SAAQC,KAAMC,IACtCS,KADU,uCACJ,WAAMC,GAAN,iBAAAb,EAAA,yDACAa,EAAIC,GADJ,gCAE4BD,EAAIE,OAFhC,uBAEKC,EAFL,EAEKA,QAFL,kBAGI,CAAEC,SAAU,QAASD,YAHzB,gCAKEH,EAAIE,QALN,2CADI,uDAVQ,mFAAH,sD,kBCIpB,SAASG,EAAMC,GACb,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAIvC,SAASG,EAAT,GAAuF,IAAD,IAAxDC,YAAwD,aAA1CP,eAA0C,MAAhC,GAAgC,MAA5BC,gBAA4B,MAAjB,UAAiB,EAC7FO,EAAUC,IAEVC,EAAc,SAACC,EAA8BC,GAClC,cAAXA,IAIJL,GAAO,IAIT,OACE,yBAAKM,UAAWL,EAAQM,MACtB,kBAACC,EAAA,EAAD,CAAUR,KAAOA,EAAOS,iBAAmB,IAAOC,QAAUP,GAC1D,kBAAC,EAAD,CAAOO,QAAUP,EAAcT,SAAWA,GACtCD,KAOZ,IAAMS,EAAYS,aAAW,SAACC,GAAD,MAAmB,CAC9CL,KAAM,CACJM,MAAO,OACP,YAAa,CACXC,UAAWF,EAAMG,QAAQ,SCuD/B,IAQeC,eARS,SAAEC,GAAF,MAAyB,CAC/CjD,SAAUiD,EAAM5C,OAAOL,aAGC,SAAEkD,GAAF,MAAkC,CAC1DnD,YAAa,SAACC,GAAD,OAAoCkD,EAAShD,EAAOG,OAAON,YAAaC,QAGxEgD,EA9Ef,YAAsD,IAA/BhD,EAA8B,EAA9BA,SAAUD,EAAoB,EAApBA,YACzBkC,EAAUC,IADmC,EAEnBiB,mBAAS,CAAEnB,MAAM,EAAOP,QAAS,GAAIC,SAAU,KAF5B,mBAE5C0B,EAF4C,KAElCC,EAFkC,OAGvBF,oBAAU,GAHa,mBAG5CG,EAH4C,KAGpCC,EAHoC,KAsBnD,OACE,kBAACC,EAAA,EAAD,CAAgBC,UAAYC,KAC1B,kBAACC,EAAA,EAAD,CAAOrB,UAAYL,EAAQ2B,MAAQC,aAAW,gBAC5C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,mDACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,4BACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,kCACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,wCACA,kBAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,sDAGJ,kBAACC,EAAA,EAAD,KAEIlE,GACEA,EAASgB,KAAI,SAACmD,GAAD,OACX,kBAACJ,EAAA,EAAD,CAAU9C,IAAMkD,EAAIC,KAClB,kBAACJ,EAAA,EAAD,CAAWP,UAAU,KAAKY,MAAM,OAC5BF,EAAIG,SAER,kBAACN,EAAA,EAAD,CAAWC,MAAM,SAAUE,EAAI/E,MAC/B,kBAAC4E,EAAA,EAAD,CAAWC,MAAM,SAAUE,EAAI5E,MAC/B,kBAACyE,EAAA,EAAD,CAAWC,MAAM,SAAUE,EAAII,YAC/B,kBAACP,EAAA,EAAD,CAAWC,MAAM,SACf,kBAACO,EAAA,EAAD,CACE1C,QAAQ,YACR2C,MAAM,YACNC,SAAWpB,EACXqB,QAAS,kBA5CH,SAAEP,GAC1Bb,GAAW,GAEXhD,EAAQ,kBAAmB,OAAQ,CAAE6D,QAClC/C,MAAK,YAAgC,IAA7BI,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,SAChB2B,EAAY,CAAErB,MAAM,EAAMP,UAASC,aACnC6B,GAAW,MAIf,IAAMe,EAAUtE,EAAS4E,MAAK,SAACC,GAAD,OAAeA,EAAKT,IAAMA,KAClDU,EAAM9E,EAAS+E,QAAO,SAACC,GAAD,OAAYA,EAAEZ,MAAQE,EAAQF,OAC1DrE,EAAa+E,GACbvB,GAAW,GA+BsB0B,CAAmBd,EAAIC,OAJxC,qDAed,kBAACrC,EAAD,CACEC,KAAMoB,EAASpB,KACfP,QAAS2B,EAAS3B,QAClBC,SAAU0B,EAAS1B,eAkBrBQ,EAAYS,YAAW,CAC3BiB,MAAO,CACLf,MAAO,U,+DCyBX,IAYeG,gBAZS,SAAEC,GAAF,MAAyB,CAC/ChE,WAAYgE,EAAM5C,OAAOpB,WACzBG,KAAM6D,EAAM5C,OAAOjB,KACnBS,eAAgBoD,EAAM9C,OAAON,mBAGL,SAAEqD,GAAF,MAAkC,CAC1DlE,iBAAkB,SAACC,GAAD,OAAwBiE,EAAShD,EAAOG,OAAOrB,iBAAkBC,KACnFE,WAAY,SAACC,GAAD,OAAkB8D,EAAShD,EAAOG,OAAOlB,WAAYC,KACjEW,YAAa,SAACC,GAAD,OAAoCkD,EAAShD,EAAOG,OAAON,YAAaC,QAGxEgD,EAzHf,YAA+G,IAArFhE,EAAoF,EAApFA,iBAAkBC,EAAkE,EAAlEA,WAAYE,EAAsD,EAAtDA,WAAYC,EAA0C,EAA1CA,KAAMS,EAAoC,EAApCA,eAAgBE,EAAoB,EAApBA,YAClFkC,EAAUC,KAD4F,EAE1DiB,mBAAiB,IAFyC,mBAEpG+B,EAFoG,KAElFC,EAFkF,OAGpEhC,oBAAU,GAH0D,mBAGpGiC,EAHoG,KAGvFC,EAHuF,OAI5ElC,mBAAS,CAAEnB,MAAM,EAAOP,QAAS,GAAIC,SAAU,KAJ6B,mBAIrG0B,EAJqG,KAI3FC,EAJ2F,OAKhFF,oBAAU,GALsE,mBAKrGG,EALqG,KAK7FC,EAL6F,KAQ5G+B,qBAAU,WACRC,EAAiB,MAChB,IASH,IAAMA,EAAmB,SAAE1G,GACpBA,EAAK2G,QAIRL,EAAoB,IACpBE,GAAgB,KAJhBF,EAAoB,2GACpBE,GAAgB,IAKlBrG,EAAkBH,IAGd4G,EAAW,uCAAG,8BAAAhF,EAAA,6DAClB8C,GAAW,GADO,SAGkBhD,EAAQ,WAAY,OAAQ,CAAEtB,aAAYG,SAH5D,gBAGVY,EAHU,EAGVA,SAHU,EAGAyB,QAEbzB,GAIHD,EAAaC,GACbqD,EAAY,CAAErB,MAAM,EAAMP,QAAS,wDAAiBC,SAAU,YAC9D6B,GAAW,KALXF,EAAY,CAAErB,MAAM,EAAMP,QAAS,6DAAiBC,SAAU,UAC9D6B,GAAW,IAPK,2CAAH,qDAgBjB,OACA,oCACI,yBAAKjB,UAAWL,EAAQM,MACtB,kBAACmD,EAAA,EAAD,CACE5D,QAAQ,WACRQ,UAAYL,EAAQ0D,YACpBC,MAAQR,GAER,kBAACS,EAAA,EAAD,CAAYC,GAAG,qCAAf,qDACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,oCACRF,GAAG,8BACHG,SAAW,SAAApH,GAAI,OAAI0G,EAAkB1G,EAAKqH,OAAOC,QACjDA,MAAQlH,GAGNY,GACEA,EAAemB,KAAI,SAACX,GAAD,OACjB,kBAAC+F,EAAA,EAAD,CAAUD,MAAO9F,EAAO+D,IAAKnD,IAAKZ,EAAO+D,KAAM/D,EAAOgG,cAI9D,kBAACC,EAAA,EAAD,KAAkBpB,IAGpB,kBAACQ,EAAA,EAAD,CAAa5D,QAAQ,WAAWQ,UAAYL,EAAQ0D,aAClD,kBAAC,IAAD,CACIY,OAAO,SACPT,GAAG,qBACHU,MAAM,gEACNC,OAAO,aACPN,MAAQ/G,EACR6G,SAjEZ,SAA4B7G,GACrBA,GACHD,EAAYC,EAAKsH,cAAcC,MAAM,KAAK,KAgElCC,oBAAqB,CACnB,aAAc,kBAKtB,6BAEA,kBAACpC,EAAA,EAAD,CACE1C,QAAQ,YACR2C,MAAM,YACNE,QAAUc,EACVf,SAAWpB,GAJb,yCAYF,kBAACvB,EAAD,CACEC,KAAMoB,EAASpB,KACfP,QAAS2B,EAAS3B,QAClBC,SAAU0B,EAAS1B,eAsBrBQ,GAAYS,aAAW,SAACC,GAAD,OAC3BiE,YAAa,CACXlB,YAAa,CACXY,OAAQ3D,EAAMG,QAAQ,GACtBF,MAAO,IACPiE,YAAa,IAEfvE,KAAM,CACJwE,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,WAAY,SC3IHC,OAZf,YACE,OAD2F,EAAnEnI,iBAAmE,EAAjDqB,OAAiD,EAAzClB,WAAyC,EAA7BC,KAA6B,EAAvBS,eAElE,oCACE,kBAAC,GAAD,MAEA,6BAEA,kBAAC,EAAD,Q,UCqFN,IAYemD,gBAZS,SAAEC,GAAF,MAAyB,CAC/CmE,YAAanE,EAAM9C,OAAOmE,QAC1BrF,WAAYgE,EAAM9C,OAAOlB,WACzBY,eAAgBoD,EAAM9C,OAAON,mBAGL,SAAEqD,GAAF,MAAkC,CAC1DtE,kBAAmB,SAACC,GAAD,OAAkBqE,EAAShD,EAAOC,OAAOvB,kBAAmBC,KAC/EG,iBAAkB,SAACH,GAAD,OAAkBqE,EAAShD,EAAOC,OAAOnB,iBAAkBH,QAIhEmE,EA5Ff,YAA4G,IAAvFoE,EAAsF,EAAtFA,YAAanI,EAAyE,EAAzEA,WAAYL,EAA6D,EAA7DA,kBAAmBI,EAA0C,EAA1CA,iBAAkBa,EAAwB,EAAxBA,eAC3EoC,EAAUC,KADyF,EAEvDiB,mBAAiB,IAFsC,mBAElGkE,EAFkG,KAE/EC,EAF+E,OAGzDnE,mBAAiB,IAHwC,mBAGlG+B,EAHkG,KAGhFC,EAHgF,OAIjEhC,oBAAU,GAJuD,mBAIlGoE,EAJkG,KAIpFC,EAJoF,OAKnErE,oBAAU,GALyD,mBAKlGiC,EALkG,KAKrFC,EALqF,KAQzGC,qBAAU,WACRmC,EAAkBL,GAClB7B,EAAiB,MAChB,IAGH,IAAMkC,EAAmB,SAAE5I,GACrBA,EAAK6I,OAAS,GAChBJ,EAAqB,yHACrBE,GAAiB,IACR3I,EAAK6I,OAAS,KACvBJ,EAAqB,iIACrBE,GAAiB,KAEjBF,EAAqB,IACrBE,GAAiB,IAEnB5I,EAAmBC,IAGf0G,EAAmB,SAAE1G,GACpBA,EAAK2G,QAIRL,EAAoB,IACpBE,GAAgB,KAJhBF,EAAoB,2GACpBE,GAAgB,IAKlBrG,EAAkBH,IAIpB,OACE,oCACE,kBAAC8I,GAAA,EAAD,CACE/B,MAAQ2B,EACRzB,GAAG,iBACHU,MAAM,sEACN1E,QAAQ,WACRqE,MAAQiB,EACRQ,WAAaP,EACbpB,SAAU,SAAApH,GAAI,OAAI4I,EAAkB5I,EAAKqH,OAAOC,UAGlD,6BAEA,kBAACT,EAAA,EAAD,CACE5D,QAAQ,WACRQ,UAAYL,EAAQ0D,YACpBC,MAAQR,GAER,kBAACS,EAAA,EAAD,CAAYC,GAAG,qCAAf,qDACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,oCACRF,GAAG,8BACHG,SAAU,SAAApH,GAAI,OAAI0G,EAAkB1G,EAAKqH,OAAOC,QAChDA,MAAQlH,GAGNY,GACEA,EAAemB,KAAI,SAACX,GAAD,OACjB,kBAAC+F,EAAA,EAAD,CAAUD,MAAO9F,EAAO+D,IAAKnD,IAAKZ,EAAO+D,KAAM/D,EAAOgG,cAI9D,kBAACC,EAAA,EAAD,KAAkBpB,QAwBpBhD,GAAYS,aAAW,SAACC,GAAD,OAC3BiE,YAAa,CACXlB,YAAa,CACXY,OAAQ3D,EAAMG,QAAQ,GACtB8E,SAAU,UC7ChB,IAUe7E,gBAVS,SAAEC,GAAF,MAAyB,CAC/C7D,KAAM6D,EAAM9C,OAAOf,KACnBG,KAAM0D,EAAM9C,OAAOZ,SAGK,SAAE2D,GAAF,MAAkC,CAC1D/D,WAAY,SAAEC,GAAF,OAAoB8D,EAAShD,EAAOC,OAAOhB,WAAYC,KACnEE,WAAY,SAAEC,GAAF,OAAoB2D,EAAShD,EAAOC,OAAOb,WAAYC,QAGtDyD,EAjEf,YAAqE,IAA7C5D,EAA4C,EAA5CA,KAAMG,EAAsC,EAAtCA,KAAMJ,EAAgC,EAAhCA,WAAYG,EAAoB,EAApBA,WACxC2C,EAAUC,KAGV4F,EAAS,CAAC,KAAM,MAatB,OACE,yBAAKxF,UAAWL,EAAQM,MACtB,kBAACmD,EAAA,EAAD,CAAa5D,QAAQ,YACnB,kBAAC,IAAD,CACIyE,OAAO,SACPT,GAAG,qBACHU,MAAM,gEACNC,OAAO,aACPN,MAAQ/G,EACR6G,SAlBV,SAA4B7G,GACrBA,GACHD,EAAYC,EAAKsH,cAAcC,MAAM,KAAK,KAiBpCC,oBAAqB,CACnB,aAAc,kBAKtB,kBAAClB,EAAA,EAAD,CAAapD,UAAWL,EAAQ0D,aAC9B,kBAACE,EAAA,EAAD,CAAYC,GAAG,qCAAf,uEACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,oCACRF,GAAG,8BACHU,MAAM,MACNL,MAAQ5G,EACR0G,SAAU,SAAA1G,GAAI,OAAID,EAAYC,EAAK2G,OAAOC,SArCrC,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAwC/CnF,KAAI,SAAA+G,GAAI,OACXD,EAAO9G,KAAI,SAAAgH,GAAG,OACZ,kBAAC5B,EAAA,EAAD,CAAUD,MAAK,UAAK4B,EAAL,YAAaC,IAAQD,EAApC,IAA2CC,eAyBrD9F,GAAYS,aAAW,SAACC,GAAD,OAC3BiE,YAAa,CACXlB,YAAa,CACXY,OAAQ3D,EAAMG,QAAQ,GACtBF,MAAO,IACPoF,WAAY,IAEd1F,KAAM,CACJwE,QAAS,OACTC,WAAY,eC9BlB,IAaehE,gBAbS,SAAEC,GAAF,MAAyB,CAC/CqB,QAASrB,EAAM9C,OAAOmE,QACtBrF,WAAYgE,EAAM9C,OAAOlB,WACzBG,KAAM6D,EAAM9C,OAAOf,KACnBG,KAAM0D,EAAM9C,OAAOZ,KACnBgF,WAAYtB,EAAM9C,OAAOoE,eAGD,SAAErB,GAAF,MAAkC,CAC1DzD,iBAAkB,SAACC,GAAD,OAAuBwD,EAAShD,EAAOC,OAAOV,iBAAkBC,QAIrEsD,EAnEf,YAA+F,IAAxEsB,EAAuE,EAAvEA,QAASrF,EAA8D,EAA9DA,WAAYG,EAAkD,EAAlDA,KAAMG,EAA4C,EAA5CA,KAAMgF,EAAsC,EAAtCA,WAAY9E,EAA0B,EAA1BA,iBAA0B,EAC5D0D,mBAAS,CAAEnB,MAAM,EAAOP,QAAS,GAAIC,SAAU,KADa,mBACrF0B,EADqF,KAC3EC,EAD2E,OAEhEF,oBAAU,GAFsD,mBAErFG,EAFqF,KAE7EC,EAF6E,KAuB5F,OACE,oCACE,kBAACoE,GAAA,EAAD,CACE7B,GAAG,iBACHU,MAAM,uCACN1E,QAAQ,WACRqE,MAAQ5B,EACR0B,SAAU,SAAAiC,GAAC,OAAIzI,EAAkByI,EAAEhC,OAAOC,UAG5C,6BAEA,kBAAC3B,EAAA,EAAD,CACE1C,QAAQ,YACR2C,MAAM,YACNE,QAlCc,WAClBpB,GAAW,GAENe,EAAQkB,QAAWvG,EAAWuG,OAKjCjF,EACE,UAAW,OACX,CAAE+D,UAASrF,aAAYG,OAAMG,OAAMgF,eAElClD,MAAK,gBAAGI,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACJ2B,EAAY,CAAErB,MAAM,EAAMP,UAASC,aACnC6B,GAAW,OAVfF,EAAY,CAAErB,MAAM,EAAMP,QAAS,wHAA0BC,SAAU,UACvE6B,GAAW,KA8BTmB,SAAWpB,GAJb,gEASA,kBAACvB,EAAD,CACEC,KAAMoB,EAASpB,KACfP,QAAS2B,EAAS3B,QAClBC,SAAU0B,EAAS1B,eCtCXyG,OAfhB,WACE,IAAMlG,EAAUC,KAGhB,OACE,0BAAMI,UAAWL,EAAQM,KAAM6F,aAAa,OAC1C,kBAAC,GAAD,MACA,6BACA,kBAAC,GAAD,MACA,6BACA,kBAAC,GAAD,QAQAlG,GAAYS,aAAW,SAACC,GAAD,OAC3BiE,YAAa,CACXtE,KAAM,CACJ,QAAS,CACPgE,OAAQ3D,EAAMG,QAAQ,GACtBF,MAAO,QAETwF,QAAS,S,oBC9BFC,GAAG,uCAAG,WAAQ9H,GAAR,SAAAC,EAAA,+EAEVW,MAAM,2CAAD,OAA4CZ,IACrDa,MAAM,SAAAC,GAAG,OAAIA,EAAIE,WAHH,2CAAH,sDCyChB,IAIewB,eAAS,MAJE,SAAEE,GAAF,MAAkC,CAC1DtD,qBAAsB,SAACf,GAAD,OAAkBqE,EAAShD,EAAOC,OAAOP,qBAAsBf,QAGxEmE,EAnCf,YAAmD,IAA7BpD,EAA4B,EAA5BA,qBACdqC,EAAUC,KAQhB,OANAoD,qBAAU,WACRgD,GAAI,WACDjH,MAAK,gBAAGkH,EAAH,EAAGA,QAAH,OAAiB3I,EAAsB2I,QAC9C,CAAE3I,IAIH,yBAAK0C,UAAWL,EAAQM,MACtB,kBAACiG,GAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,GAAA,EAAD,CAASpG,UAAWL,EAAQ0G,SACxB,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAACpE,EAAA,EAAD,CAAQC,MAAM,YAAY3C,QAAQ,aAAlC,wEAIF,kBAAC,IAAD,CAAM8G,GAAG,UACP,kBAACpE,EAAA,EAAD,CAAQC,MAAM,YAAY3C,QAAQ,aAAlC,sGAqBRI,GAAYS,aAAW,SAACC,GAAD,OAC3BiE,YAAa,CACXtE,KAAM,CACJsG,SAAU,GAEZF,QAAS,CACP5B,QAAS,OACTE,eAAgB,sBChDP,SAAS6B,KACtB,OACE,oCACE,kBAAC,GAAD,MACA,kBAAC,IAAD,CAAUF,GAAG,MACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIvF,UAAYwF,KAClC,kBAAC,IAAD,CAAOD,KAAK,SAASvF,UAAY0D,O,sBCbnC+B,GAAgC,CACpC5E,QAAS,GACTrF,WAAY,GACZG,MALc,IAAI+J,MAAOzC,cAAcC,MAAM,KAAK,GAMlDpH,KAAM,QACNgF,WAAY,GACZ1E,eAAgB,MAsDHuJ,GAlD0C,WAAqC,IAAnCnG,EAAkC,uDAA1BiG,GAAchJ,EAAY,uCAC3F,OAAQA,EAAOpB,MACb,KAAKJ,EAAeK,oBAEhB,OAAO,6BACFkE,GADL,IAEEqB,QAASpE,EAAOrB,OAGtB,KAAKH,EAAeQ,mBAEhB,OAAO,6BACF+D,GADL,IAEEhE,WAAYiB,EAAOjB,aAGzB,KAAKP,EAAeW,YAEhB,OAAO,6BACF4D,GADL,IAEE7D,KAAMc,EAAOd,OAGnB,KAAKV,EAAec,YAEhB,OAAO,6BACFyD,GADL,IAEE1D,KAAMW,EAAOX,OAGnB,KAAKb,EAAeiB,kBAEhB,OAAO,6BACFsD,GADL,IAEEsB,WAAYrE,EAAOqE,aAGzB,KAAK7F,EAAeoB,wBAEhB,OAAO,6BACFmD,GADL,IAEEpD,eAAgBK,EAAOL,iBAG7B,QACE,OAAOoD,ICtDPiG,GAAoC,CACxCjK,WAAY,GACZG,MAJc,IAAI+J,MAAOzC,cAAcC,MAAM,KAAK,GAKlD3G,SAAU,MAiCGqJ,GA7BkD,WAAqC,IAAnCpG,EAAkC,uDAA1BiG,GAAchJ,EAAY,uCACnG,OAAQA,EAAOpB,MACb,KAAKH,EAAmBO,mBAEpB,OAAO,6BACF+D,GADL,IAEEhE,WAAYiB,EAAOjB,aAGzB,KAAKN,EAAmBU,YAEpB,OAAO,6BACF4D,GADL,IAEE7D,KAAMc,EAAOd,OAGnB,KAAKT,EAAmBsB,aAEpB,OAAO,6BACFgD,GADL,IAEEjD,SAAUE,EAAOF,WAGvB,QACE,OAAOiD,IC3BEqG,GALKC,aAAiB,CACnCpJ,OAAQiJ,GACR/I,OAAQgJ,KCDKG,GAHDC,aAAcH,ICUb,SAASI,KACtB,OACE,kBAAC,IAAD,CAAUF,MAAQA,IAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAyBG,MAAQC,KAC/B,kBAAC,IAAD,CAAOZ,KAAK,IAAIvF,UAAYqF,SCRtBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,GAAD,OAEFW,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpJ,MAAK,SAAAqJ,GACJA,EAAaC,gBAEdC,OAAM,SAAAhF,GACLiF,QAAQjF,MAAMA,EAAMnE,c","file":"static/js/main.cdb1a0d2.chunk.js","sourcesContent":["\r\n\r\nexport enum recordFormType {\r\n  CHANGE_NAME_PATIENT = 'CHANGE_NAME_PATIENT',\r\n  CHANGE_NAME_DOCTOR = 'CHANGE_NAME_DOCTOR',\r\n  CHANGE_DATE = 'CHANGE_DATE',\r\n  CHANGE_TIME = 'CHANGE_TIME',\r\n  CHANGE_COMPLAINTS = 'CHANGE_COMPLAINTS',\r\n  CHANGE_DOCTOR_FULL_NAME = 'CHANGE_DOCTOR_FULL_NAME',\r\n}\r\n","import { recordFormType } from './type'\r\n\r\n\r\nexport const changeNamePatient = ( name: string ) => {\r\n  return {\r\n    type: recordFormType.CHANGE_NAME_PATIENT,\r\n    name\r\n  }\r\n}\r\n\r\nexport const changeNameDoctor = ( _id_doctor: string ) => {\r\n  return {\r\n    type: recordFormType.CHANGE_NAME_DOCTOR,\r\n    _id_doctor\r\n  }\r\n}\r\n\r\nexport const changeDate = ( date: string ) => {\r\n  return {\r\n    type: recordFormType.CHANGE_DATE,\r\n    date\r\n  }\r\n}\r\n\r\nexport const changeTime = ( time: string ) => {\r\n  return {\r\n    type: recordFormType.CHANGE_TIME,\r\n    time\r\n  }\r\n}\r\n\r\nexport const changeComplaints = ( complaint: string ) => {\r\n  return {\r\n    type: recordFormType.CHANGE_COMPLAINTS,\r\n    complaint\r\n  }\r\n}\r\n\r\nexport const changeDoctorFullName = ( doctorFullName: string ) => {\r\n  return {\r\n    type: recordFormType.CHANGE_DOCTOR_FULL_NAME,\r\n    doctorFullName\r\n  }\r\n}","\r\n\r\nexport enum doctorScheduleType {\r\n  CHANGE_NAME_DOCTOR = 'CHANGE_NAME_DOCTOR',\r\n  CHANGE_DATE = 'CHANGE_DATE',\r\n  GET_PATIENTS = 'GET_PATIENTS',\r\n}","import { doctorScheduleType } from './type'\r\n\r\n\r\nexport const changeNameDoctor = ( _id_doctor: string ) => {\r\n  return {\r\n    type: doctorScheduleType.CHANGE_NAME_DOCTOR,\r\n    _id_doctor\r\n  }\r\n}\r\n\r\nexport const changeDate = ( date: string ) => {\r\n  return {\r\n    type: doctorScheduleType.CHANGE_DATE,\r\n    date\r\n  }\r\n}\r\n\r\nexport const getPatients = ( patients: Array<object> | null ) => {\r\n  return {\r\n    type: doctorScheduleType.GET_PATIENTS,\r\n    patients\r\n  }\r\n}\r\n","import { StateType } from 'typesafe-actions'\r\n\r\nimport rootReducer from \"./root-reducer\"\r\nimport * as recordFormActions from './recordForm/actions'\r\nimport * as doctorSchedule from './doctorSchedule/actions'\r\n\r\n\r\nexport const action = {\r\n  record: recordFormActions,\r\n  doctor: doctorSchedule\r\n}\r\n\r\n\r\n\r\nexport type RootState = StateType<typeof rootReducer>","\r\nexport const request = async ( url: string, method = 'GET', body: object ) => {\r\n\r\n  url = `https://rocky-refuge-77020.herokuapp.com${url}`\r\n\r\n  const form = new FormData()\r\n\r\n  Object.entries( body ).map(([ key, val ]: any) => {\r\n    form.append( key, val )\r\n  })\r\n\r\n  return await fetch( url, { method, body: form } )\r\n    .then( async res => {\r\n      if( !res.ok ){\r\n        const { message }: any = await res.json()\r\n        return { severity: 'error', message }\r\n      }\r\n      return res.json()\r\n    })\r\n}","import React, { useEffect } from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nexport default function CustomizedSnackbar({ open = false, message = '', severity = 'success'}: any) {\r\n  const classes = useStyles()\r\n  \r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n\r\n    open = false\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Snackbar open={ open } autoHideDuration={ 3000 } onClose={ handleClose }>\r\n        <Alert onClose={ handleClose } severity={ severity }>\r\n          { message }\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));","import React, { Dispatch, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { Action } from 'redux'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { RootState } from '../../../store'\r\nimport { action } from '../../../store'\r\nimport { request } from '../../../api/request'\r\nimport CustomizedSnackbar from '../../../feedback/Snackbar'\r\n\r\n\r\n\r\nfunction SimpleTable({ patients, getPatients }: any) {\r\n  const classes = useStyles()\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: '' })\r\n  const [button, setButton] = useState( false )\r\n\r\n\r\n  const handleClickDelete = ( _id:string ) => {\r\n    setButton( true )\r\n\r\n    request('/delete/patient', 'POST', { _id })\r\n      .then(({ message, severity }:any) => {\r\n        setSnackbar({ open: true, message, severity })\r\n        setButton( false )\r\n      })\r\n\r\n    // remove array patients in reducer\r\n    const patient = patients.find((item: any) => item._id = _id)\r\n    const arr = patients.filter((n: any) => n._id !== patient._id)\r\n    getPatients( arr )\r\n    setButton( false )\r\n  }\r\n\r\n  return (\r\n    <TableContainer component={ Paper }>\r\n      <Table className={ classes.table } aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Пациент</TableCell>\r\n            <TableCell align=\"right\">Дата</TableCell>\r\n            <TableCell align=\"right\">Время</TableCell>\r\n            <TableCell align=\"right\">Жалобы</TableCell>\r\n            <TableCell align=\"right\">Действие</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            patients &&\r\n              patients.map((row: any) => (\r\n                <TableRow key={ row._id }>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    { row.patient }\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">{ row.date }</TableCell>\r\n                  <TableCell align=\"right\">{ row.time }</TableCell>\r\n                  <TableCell align=\"right\">{ row.complaints }</TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <Button \r\n                      variant=\"contained\" \r\n                      color=\"secondary\"\r\n                      disabled={ button }\r\n                      onClick={() => handleClickDelete( row._id )}\r\n                    >\r\n                      Удалить\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n\r\n      <CustomizedSnackbar \r\n        open={snackbar.open} \r\n        message={snackbar.message} \r\n        severity={snackbar.severity}\r\n      />\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ( state: RootState ) => ({\r\n  patients: state.doctor.patients,\r\n})\r\n\r\nconst mapDispathToProps = ( dispath: Dispatch<Action> ) => ({\r\n  getPatients: (patients: Array<object> | null) => dispath( action.doctor.getPatients( patients ))\r\n})\r\n\r\nexport default connect( mapStateToProps, mapDispathToProps )( SimpleTable )\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    width: '100%',\r\n  }\r\n})","import 'date-fns';\r\nimport React, { Dispatch, useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  FormHelperText,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { Action } from 'redux'\r\nimport { connect } from 'react-redux';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport { RootState } from '../../../store'\r\nimport { action } from '../../../store'\r\nimport { request } from '../../../api/request'\r\nimport CustomizedSnackbar from '../../../feedback/Snackbar'\r\n\r\n\r\n\r\nfunction FilterSchedule({ changeNameDoctor, _id_doctor, changeDate, date, doctorFullName, getPatients }: any) {\r\n  const classes = useStyles()\r\n  const [ helperTextDoctor, setHelperTextDoctor ] = useState<string>('')\r\n  const [ errorDoctor, setErrorDoctor ] = useState( false )\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: '' })\r\n  const [button, setButton] = useState( false )\r\n\r\n\r\n  useEffect(() => {\r\n    handleNameDoctor('')\r\n  }, [])\r\n\r\n  // date parse in normal format 2020-08-19\r\n  function handleDateChange ( date: Date | null ){\r\n    if ( date ) {\r\n      changeDate( date.toISOString().split('T')[0] )\r\n    }\r\n  }\r\n  // validation select\r\n  const handleNameDoctor = ( name: string | any ) => {\r\n    if( !name.trim() ){\r\n      setHelperTextDoctor('Обьязательное поле')\r\n      setErrorDoctor( true )\r\n    } else {\r\n      setHelperTextDoctor('')\r\n      setErrorDoctor( false )\r\n    }\r\n    changeNameDoctor( name )\r\n  }\r\n\r\n  const handleClick = async () => {\r\n    setButton( true )\r\n    // Get patient\r\n    const { patients, message } = await request('/patient', 'POST', { _id_doctor, date })\r\n\r\n    if( !patients ){\r\n      setSnackbar({ open: true, message: 'Не найдено :(', severity: 'error' })\r\n      setButton( false )\r\n    } else {\r\n      getPatients( patients )\r\n      setSnackbar({ open: true, message: 'Ура! Нашёл :)', severity: 'success' })\r\n      setButton( false )\r\n    }\r\n  }\r\n\r\n  \r\n  return (\r\n  <>\r\n      <div className={classes.root}>\r\n        <FormControl\r\n          variant=\"outlined\" \r\n          className={ classes.formControl }\r\n          error={ errorDoctor }\r\n        >\r\n          <InputLabel id=\"demo-simple-select-outlined-label\">ФИО врача</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-outlined-label\"\r\n            id=\"demo-simple-select-outlined\"\r\n            onChange={ name => handleNameDoctor( name.target.value )}\r\n            value={ _id_doctor }\r\n          >\r\n            {\r\n              doctorFullName &&\r\n                doctorFullName.map((doctor: any) => (\r\n                  <MenuItem value={doctor._id} key={doctor._id}>{doctor.fullName}</MenuItem>\r\n                ))\r\n            }\r\n          </Select>\r\n          <FormHelperText>{ helperTextDoctor }</FormHelperText>\r\n        </FormControl>\r\n\r\n        <FormControl variant=\"outlined\" className={ classes.formControl }>\r\n          <KeyboardDatePicker\r\n              margin=\"normal\"\r\n              id=\"date-picker-dialog\"\r\n              label=\"Дата записи\"\r\n              format=\"MM/dd/yyyy\"\r\n              value={ date }\r\n              onChange={ handleDateChange }\r\n              KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n              }}\r\n          />\r\n        </FormControl>\r\n\r\n        <br/>\r\n\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"secondary\"\r\n          onClick={ handleClick }\r\n          disabled={ button }\r\n        >\r\n          Искать\r\n        </Button>\r\n        \r\n      </div>\r\n\r\n\r\n      <CustomizedSnackbar \r\n        open={snackbar.open} \r\n        message={snackbar.message} \r\n        severity={snackbar.severity}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = ( state: RootState ) => ({\r\n  _id_doctor: state.doctor._id_doctor,\r\n  date: state.doctor.date,\r\n  doctorFullName: state.record.doctorFullName\r\n})\r\n\r\nconst mapDispathToProps = ( dispath: Dispatch<Action> ) => ({\r\n  changeNameDoctor: (_id_doctor: string) => dispath( action.doctor.changeNameDoctor( _id_doctor )),\r\n  changeDate: (date: string) => dispath( action.doctor.changeDate( date )),\r\n  getPatients: (patients: Array<object> | null) => dispath( action.doctor.getPatients( patients ))\r\n})\r\n\r\nexport default connect( mapStateToProps, mapDispathToProps )( FilterSchedule )\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      width: 280,\r\n      marginRight: 30\r\n    },\r\n    root: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      paddingTop: 20\r\n    }\r\n  })\r\n)","import React from 'react';\r\n\r\nimport VirtualizedTable from './components/table'\r\nimport FilterSchedule from './components/filterSchedule'\r\n\r\n\r\nfunction DoctorSchedule({ changeNameDoctor, doctor, changeDate, date, doctorFullName }: any) {\r\n  return (\r\n    <>\r\n      <FilterSchedule />\r\n\r\n      <br/>\r\n\r\n      <VirtualizedTable/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DoctorSchedule","import React, { Dispatch, useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  FormHelperText,\r\n} from '@material-ui/core';\r\nimport { Action } from 'redux'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { RootState } from '../../../store'\r\nimport { action } from '../../../store'\r\n\r\n\r\n\r\nfunction FullName ({ patientName, _id_doctor, changeNamePatient, changeNameDoctor, doctorFullName }: any ) {\r\n  const classes = useStyles()\r\n  const [helperTextPatient, setHelperTextPatient] = useState<string>('')\r\n  const [helperTextDoctor, setHelperTextDoctor] = useState<string>('')\r\n  const [errorPatient, setErrorPatient] = useState( false )\r\n  const [errorDoctor, setErrorDoctor] = useState( false )\r\n\r\n\r\n  useEffect(() => {\r\n    handleChangeName( patientName )\r\n    handleNameDoctor('')\r\n  }, [])\r\n\r\n\r\n  const handleChangeName = ( name: string ) => {\r\n    if( name.length < 5 ){\r\n      setHelperTextPatient('Минимальное значение 5')\r\n      setErrorPatient( true )\r\n    } else if( name.length > 100 ){\r\n      setHelperTextPatient('Максимальное значение 100')\r\n      setErrorPatient( true )\r\n    } else {\r\n      setHelperTextPatient('')\r\n      setErrorPatient( false )\r\n    }\r\n    changeNamePatient( name )\r\n  }\r\n\r\n  const handleNameDoctor = ( name: string | any ) => {\r\n    if( !name.trim() ){\r\n      setHelperTextDoctor('Обьязательное поле')\r\n      setErrorDoctor( true )\r\n    } else {\r\n      setHelperTextDoctor('')\r\n      setErrorDoctor( false )\r\n    }\r\n    changeNameDoctor( name )\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <TextField \r\n        error={ errorPatient }\r\n        id=\"outlined-basic\" \r\n        label=\"ФИО пациента\" \r\n        variant=\"outlined\"\r\n        value={ patientName }\r\n        helperText={ helperTextPatient }\r\n        onChange={name => handleChangeName( name.target.value )}\r\n      />\r\n\r\n      <br/>\r\n\r\n      <FormControl \r\n        variant=\"outlined\" \r\n        className={ classes.formControl }\r\n        error={ errorDoctor }\r\n      >\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">ФИО врача</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          onChange={name => handleNameDoctor( name.target.value )}\r\n          value={ _id_doctor }\r\n        >\r\n          {\r\n            doctorFullName &&\r\n              doctorFullName.map((doctor: any) => (\r\n                <MenuItem value={doctor._id} key={doctor._id}>{doctor.fullName}</MenuItem>\r\n              ))\r\n          }\r\n        </Select>\r\n        <FormHelperText>{ helperTextDoctor }</FormHelperText>\r\n      </FormControl>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = ( state: RootState ) => ({\r\n  patientName: state.record.patient,\r\n  _id_doctor: state.record._id_doctor,\r\n  doctorFullName: state.record.doctorFullName\r\n})\r\n\r\nconst mapDispathToProps = ( dispath: Dispatch<Action> ) => ({\r\n  changeNamePatient: (name: string) => dispath( action.record.changeNamePatient( name )),\r\n  changeNameDoctor: (name: string) => dispath( action.record.changeNameDoctor( name ))\r\n})\r\n\r\n\r\nexport default connect( mapStateToProps, mapDispathToProps )( FullName )\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n    }\r\n  })\r\n)\r\n","import 'date-fns';\r\nimport React, { Dispatch } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport {\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  InputLabel,\r\n} from '@material-ui/core';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport { Action } from 'redux'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { RootState } from '../../../store'\r\nimport { action } from '../../../store'\r\n\r\n\r\n\r\nfunction ReacordDate ({ date, time, changeDate, changeTime }: any ) {\r\n  const classes = useStyles()\r\n\r\n  const hour = ['09', '10', '11', '12', '13', '14', '15', '16', '17']\r\n  const minute = ['00', '30']\r\n\r\n\r\n  // date parse in normal format\r\n  function handleDateChange ( date: Date | null ){\r\n    if ( date ) {\r\n      changeDate( date.toISOString().split('T')[0] )\r\n      // 2020-08-19\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormControl variant=\"outlined\">\r\n        <KeyboardDatePicker\r\n            margin=\"normal\"\r\n            id=\"date-picker-dialog\"\r\n            label=\"Дата записи\"\r\n            format=\"MM/dd/yyyy\"\r\n            value={ date }\r\n            onChange={ handleDateChange }\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n        />\r\n      </FormControl>\r\n\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Время записи</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          label=\"Age\"\r\n          value={ time }\r\n          onChange={time => changeTime( time.target.value )}\r\n        >\r\n          {\r\n            hour.map(hour => (\r\n              minute.map(min => (\r\n                <MenuItem value={`${hour}:${min}`}>{hour}:{min}</MenuItem>\r\n              ))\r\n            ))\r\n          }\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = ( state: RootState ) => ({\r\n  date: state.record.date,\r\n  time: state.record.time\r\n})\r\n\r\nconst mapDispathToProps = ( dispath: Dispatch<Action> ) => ({\r\n  changeDate: ( date: string ) => dispath( action.record.changeDate( date )),\r\n  changeTime: ( time: string ) => dispath( action.record.changeTime( time ))\r\n})\r\n\r\nexport default connect( mapStateToProps, mapDispathToProps )( ReacordDate )\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      width: 150,\r\n      marginLeft: 10\r\n    },\r\n    root: {\r\n      display: 'flex',\r\n      alignItems: 'center'\r\n    }\r\n  })\r\n)\r\n","import React, { Dispatch, useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { Action } from 'redux'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { RootState } from '../../../store'\r\nimport { action } from '../../../store'\r\nimport { request } from '../../../api/request'\r\nimport CustomizedSnackbar from '../../../feedback/Snackbar'\r\n\r\n\r\nfunction Complaints ({ patient, _id_doctor, date, time, complaints, changeComplaints }: any ) {\r\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: '' })\r\n  const [button, setButton] = useState( false )\r\n\r\n  const changeClick = () => {\r\n    setButton( true )\r\n    // Record patient\r\n    if( !patient.trim() || !_id_doctor.trim() ){\r\n      setSnackbar({ open: true, message: 'Заполните нужные поля!', severity: 'error' })\r\n      setButton( false )\r\n    }\r\n    else {\r\n      request(\r\n        '/record', 'POST', \r\n        { patient, _id_doctor, date, time, complaints }\r\n      )\r\n        .then(({ message, severity }:any) => (\r\n          setSnackbar({ open: true, message, severity }),\r\n          setButton( false )\r\n        ))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TextField \r\n        id=\"outlined-basic\" \r\n        label=\"Жалобы\" \r\n        variant=\"outlined\"\r\n        value={ complaints }\r\n        onChange={e => changeComplaints( e.target.value )}\r\n      />\r\n\r\n      <br/>\r\n\r\n      <Button \r\n        variant=\"contained\" \r\n        color=\"secondary\"\r\n        onClick={ changeClick }\r\n        disabled={ button }\r\n      >\r\n        Записаться\r\n      </Button>\r\n\r\n      <CustomizedSnackbar \r\n        open={snackbar.open} \r\n        message={snackbar.message} \r\n        severity={snackbar.severity}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nconst mapStateToProps = ( state: RootState ) => ({\r\n  patient: state.record.patient,\r\n  _id_doctor: state.record._id_doctor,\r\n  date: state.record.date,\r\n  time: state.record.time,\r\n  complaints: state.record.complaints,\r\n})\r\n\r\nconst mapDispathToProps = ( dispath: Dispatch<Action> ) => ({\r\n  changeComplaints: (complaint: string) => dispath( action.record.changeComplaints( complaint )),\r\n})\r\n\r\n\r\nexport default connect( mapStateToProps, mapDispathToProps )( Complaints )","import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport FullName from './components/fullName'\r\nimport ReacordDate from './components/recordDate'\r\nimport Complaints from './components/complaints'\r\n\r\n\r\nfunction ReacordForm () {\r\n  const classes = useStyles()\r\n  \r\n\r\n  return (\r\n    <form className={classes.root} autoComplete=\"off\">\r\n      <FullName />\r\n      <br/>\r\n      <ReacordDate />\r\n      <br/>\r\n      <Complaints />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default  ReacordForm\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '50ch',\r\n      },\r\n      padding: 20\r\n    }\r\n  })\r\n)\r\n","\r\n\r\n\r\nexport const get = async ( url: string ) => {\r\n\r\n  return fetch(`https://rocky-refuge-77020.herokuapp.com${url}`)\r\n    .then( res => res.json() )\r\n}","import React, { Dispatch, useEffect } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Button from '@material-ui/core/Button'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Action } from 'redux'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { action } from '../store'\r\nimport { get } from '../api/getDoctors'\r\n\r\n\r\nfunction AppBarMenu({ changeDoctorFullName }: any){\r\n  const classes = useStyles()\r\n\r\n  useEffect(() => {\r\n    get('/doctor')\r\n      .then(({ doctors }) => changeDoctorFullName( doctors ))\r\n  }, [ changeDoctorFullName ])\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.toolbar}>\r\n            <Link to='/'>\r\n              <Button color=\"secondary\" variant=\"contained\">\r\n                Форма записи\r\n              </Button>\r\n            </Link>\r\n            <Link to='/about'>\r\n              <Button color=\"secondary\" variant=\"contained\">\r\n                Расписание врача\r\n              </Button>\r\n            </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst mapDispathToProps = ( dispath: Dispatch<Action> ) => ({\r\n  changeDoctorFullName: (name: string) => dispath( action.record.changeDoctorFullName( name )),\r\n})\r\n\r\nexport default connect( null, mapDispathToProps )( AppBarMenu )\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between'\r\n    }\r\n  }),\r\n)\r\n","import React from \"react\"\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\"\r\n\r\nimport DoctorSchedule from '../components/doctorSchedule/doctorSchedule'\r\nimport RecordForm from '../components/recordForm/recordForm'\r\nimport AppBarMenu from '../components/AppBarMenu'\r\n\r\n\r\nexport default function AppStack() {\r\n  return (\r\n    <>\r\n      <AppBarMenu />\r\n      <Redirect to='/'/>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ RecordForm }/>\r\n        <Route path=\"/about\" component={ DoctorSchedule }/>\r\n      </Switch>\r\n    </>\r\n  )\r\n}","import { Reducer } from 'redux'\r\nimport { recordFormState } from './interface'\r\nimport { recordFormType } from './type'\r\n\r\nconst dateNow = new Date().toISOString().split('T')[0]\r\n\r\nconst defaultState: recordFormState = {\r\n  patient: '',\r\n  _id_doctor: '',\r\n  date: dateNow,\r\n  time: '09:00',\r\n  complaints: '',\r\n  doctorFullName: null\r\n}\r\n\r\n\r\nconst recordFormReducer: Reducer<recordFormState, any> = ( state = defaultState, action ) => {\r\n  switch( action.type ){\r\n    case recordFormType.CHANGE_NAME_PATIENT:\r\n      {\r\n        return {\r\n          ...state,\r\n          patient: action.name\r\n        }\r\n      }\r\n    case recordFormType.CHANGE_NAME_DOCTOR:\r\n      {\r\n        return {\r\n          ...state,\r\n          _id_doctor: action._id_doctor\r\n        }\r\n      }\r\n    case recordFormType.CHANGE_DATE:\r\n      {\r\n        return {\r\n          ...state,\r\n          date: action.date\r\n        }\r\n      }\r\n    case recordFormType.CHANGE_TIME:\r\n      {\r\n        return {\r\n          ...state,\r\n          time: action.time\r\n        }\r\n      }\r\n    case recordFormType.CHANGE_COMPLAINTS:\r\n      {\r\n        return {\r\n          ...state,\r\n          complaints: action.complaints\r\n        }\r\n      }\r\n    case recordFormType.CHANGE_DOCTOR_FULL_NAME:\r\n      {\r\n        return {\r\n          ...state,\r\n          doctorFullName: action.doctorFullName\r\n        }\r\n      }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default recordFormReducer","import { Reducer } from 'redux'\r\nimport { doctorScheduleState } from './interface'\r\nimport { doctorScheduleType } from './type'\r\n\r\n\r\nconst dateNow = new Date().toISOString().split('T')[0]\r\n\r\nconst defaultState: doctorScheduleState = {\r\n  _id_doctor: '',\r\n  date: dateNow,\r\n  patients: null\r\n}\r\n\r\n\r\nconst doctorScheduleReducer: Reducer<doctorScheduleState, any> = ( state = defaultState, action ) => {\r\n  switch( action.type ){\r\n    case doctorScheduleType.CHANGE_NAME_DOCTOR:\r\n      {\r\n        return {\r\n          ...state,\r\n          _id_doctor: action._id_doctor\r\n        }\r\n      }\r\n    case doctorScheduleType.CHANGE_DATE:\r\n      {\r\n        return {\r\n          ...state,\r\n          date: action.date\r\n        }\r\n      }\r\n    case doctorScheduleType.GET_PATIENTS:\r\n      {\r\n        return {\r\n          ...state,\r\n          patients: action.patients\r\n        }\r\n      }\r\n    default: {\r\n      return state\r\n    }\r\n  }\r\n}\r\n\r\nexport default doctorScheduleReducer","import { combineReducers } from 'redux'\r\n\r\nimport recordFormReducer from './recordForm/reducer'\r\nimport doctorScheduleReducer from './doctorSchedule/reducer'\r\n\r\n\r\nconst rootReducer = combineReducers ({\r\n  record: recordFormReducer,\r\n  doctor: doctorScheduleReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore } from \"redux\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\n\r\nconst store = createStore ( rootReducer )\r\n\r\n\r\nexport default store","import React from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\"\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { Provider } from 'react-redux'\n\nimport AppStack from './pages/AppStack'\nimport store from './store/store'\n\n\nexport default function App() {\n  return (\n    <Provider store={ store }>\n      <Router>\n          <Switch>\n            <MuiPickersUtilsProvider utils={ DateFnsUtils }>\n              <Route path=\"/\" component={ AppStack } />\n            </MuiPickersUtilsProvider>\n          </Switch>\n      </Router>\n    </Provider>\n  )\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}